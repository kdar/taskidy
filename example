#!/usr/bin/env bash

cd "$( dirname "${BASH_SOURCE[0]}" )" || exit
source ./taskidy.sh

# Says hello to you
# Some long
# description
#
# Usage:
#   ./taskfile hello [args...]
task:hello() {
  echo "Hello" "$@" "!"
}

# Prints the statement before executing
# This uses set -x to print the statement before
# running it. This particular example shows how
# to use a subshell so you don't actually print
# out "set -x".
task:print-before-exe() {
  (set -x; echo "YAY!" "$@")
}

# Exits the task on failure
# Uses set -e to exit the task when a command fails.
task:exit-on-fail() {
  set -e
  echo "Before"
  cat /tmp/sdfdsfdfgfghfghs
  echo "After"
}

# Exits the task on failure, except when skipped
# Uses set -e to exit the task when a command fails,
# but shows how you can ignore the return value of
# a command in case you don't care if it fails.
task:exit-on-fail-skip() {
  set -e
  echo "Before"
  cat /tmp/sdfdsfdfgfghfghs || true
  echo "After"
}

# Recompiles if source has changed
# This task will recompile a C program if the source
# files have changed.
task:depend-on() {
  # shellcheck disable=SC2034
  local -a inputs=(testdata/depend/src/*.{c,h})
  # shellcheck disable=SC2034
  local -a outputs=(testdata/depend/dist/main)
  if taskidy.timestamp_depend inputs outputs; then
    echo "Recompiling..."
    gcc -o testdata/depend/dist/main testdata/depend/src/main.c
    echo "Done"
  fi
}

parallel1() {
  sleep 2
  echo "parallel1: done"
}

parallel2() {
  sleep 3
  echo "parallel2: done"
  # return 1
}

# Runs some functions in parallel
# This will run two functions in parallel and report
# whether it was successful or not.
task:parallel() {
  if taskidy.parallel parallel1 parallel2; then
    echo "All exited successfully"
  else
    echo "There was an error!"
  fi
}

# Runs some code in python
# This will run some code in python. This demonstrates
# how you can use other interpreters to gain a little
# more power.
task:python() {
  python << EOF
print("Hello from python!")
EOF
}

# Runs some code in rust
# This will run some code in rust. This demonstrates
# how you can use compiled languages to gain a little
# more power. Most likely better to put this in a file
# instead.
task:rust() {
  script="/tmp/rusttaskidy"
  command -v cargo-script >/dev/null 2>&1 || { echo >&2 "cargo-script not installed"; exit 1; }

  read -r -d '' code <<"EOF"
//! This is a regular crate doc comment, but it also contains a partial
//! Cargo manifest.  Note the use of a *fenced* code block, and the
//! `cargo` "language".
//!
//! ```cargo
//! [dependencies]
//! time = "0.1.25"
//! ```
extern crate time;
fn main() {
  println!("{}", time::now().rfc822z());
}
EOF

  has_changed() {
    [ ! -f "$script" ] && return 0

    md5a="$(md5sum "${script}")"
    md5b="$(echo "$code" | md5sum)"
    
    if [[ "${md5a%% *}" == "${md5b%% *}" ]]; then
      return 1
    fi

    return 0
  }
  
  # Put the new code in the file
  if has_changed; then
    echo "$code" > "$script"
  fi

  cargo script "$script"
}

# The default task
# The task that is executed if no task is
# provided on the CLI.
task:default() {
  echo "default" "$@"
}
